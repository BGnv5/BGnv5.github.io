{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/03/20/hello-world/"},{"title":"test","text":"模板 title: 使用Hexo搭建个人博客 layout: post date: 2014-03-03 19:07:43 comments: true categories: Blog tags: [Hexo] keywords: Hexo, Blog description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。","link":"/2020/03/24/test/"},{"title":"LeetCode 148.Sort List","text":"sort-list题目描述：在O(n log n)的时间内使用常数级空间复杂度对链表进行排序。Sort a linked list in O(n log n) time using constant space complexity. 思路分析：1. 归并排序（递归法）： 如果链表为空，或者只有一个结点则直接返回这个链表 不为空，利用快慢指针把链表为成左右两部分，当快指针所指向结点不为空并且存在下一个元素时，快指针走两步，慢指针走一步。 慢指针所指向的下一个结点即为右半部分的开始，并把slow指向的下一个结点置为空。 依次递归直到左右两半部分只含有一个结点为止。 最后在进行归并。 时间复杂度：O(n log n)空间复杂度：O(n) 2. 归并排序（迭代法）： 定义一个头结点，让这个头结点的next指向head 统计链表中一共有几个结点，并遍历整个链表 每次截取长度为size的链表进行归并，每轮过后size长度*2，直到size长度等于链表的长度，设size初始值为1。 最后返回头结点指向的下一个结点 时间复杂度：O(n log n)空间复杂度：O(1) 算法实现：1.归并排序（递归法）： 123456789101112131415161718192021222324252627282930313233public class Solution { public ListNode sortList(ListNode head) { if(head == null || head.next == null) return head; ListNode slow = head; ListNode fast = head.next; while(fast != null &amp;&amp; fast.next != null){ slow = slow.next; fast = fast.next.next; } ListNode mid = slow.next; slow.next = null; ListNode left = sortList(head); ListNode right = sortList(mid); ListNode temp = new ListNode(0); ListNode p = temp; while(left != null &amp;&amp; right != null){ if(left.val &lt; right.val){ p.next = left; left = left.next; }else{ p.next = right; right = right.next; } p = p.next; } if(left != null) { p.next = left; }else{ p.next = right; } return temp.next; }} 2. 归并排序（迭代法） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960public class Solution { public ListNode sortList(ListNode head) { //求链表长度 ListNode p = head; int len = 0; while(p != null){ len ++; p = p.next; } ListNode pHead = new ListNode(0); pHead.next = head;//主要是考虑到只有一个结点的情况 for(int size = 1; size &lt; len; size *= 2){ ListNode cur = pHead.next;//一轮结束cur要回到链表首部 ListNode next = pHead;//一轮结束next回到初始位置 while(cur != null){ ListNode left = cur; ListNode right = cut(left,size); cur = cut(right,size); next.next = merge(left,right); while(next.next != null){ next = next.next; } } } return pHead.next; } //根据步长分割链表 private ListNode cut(ListNode head, int size){ if(head == null) return head; for (int i = 1; head.next != null &amp;&amp; i &lt; size; i++) { head = head.next; } ListNode nextHead = head.next; head.next = null; return nextHead; } //归并链表 private ListNode merge(ListNode left, ListNode right){ ListNode head = new ListNode(0); ListNode p = head; while(left != null &amp;&amp; right != null){ if(left.val &lt; right.val){ p.next = left; left = left.next; }else{ p.next = right; right = right.next; } p = p.next; } if(left != null) p.next = left; else p.next = right; return head.next; }}","link":"/2020/03/25/LeetCode-148-Sort-List/"},{"title":"LeetCode 147.insert-sort-list","text":"insert-sort-list题目描述：使用插入排序对链表进行排序。Sort a linked list using insertion sort. 思路分析： 如果链表为空,返回null 链表非空，定义一个头结点，遍历整个链表 定义一个变量pre用来指示应该插入的位置，如果这个变量所在位置的值小于待插入元素的值，并且这个变量存在下一个结点，则变量的位置后移一位，最终所在位置即为待插入的位置。 用一个变量cur来指示待插入数所在位置，并修改待插入数所指向下一个结点的位置,让它等于pre.next 修改带插入位置的下一个结点,让它等于cur 算法实现：123456789101112131415161718public class Solution { public ListNode insertionSortList(ListNode head) { if(head == null) return null; ListNode pHead = new ListNode(0); ListNode cur = head; while(cur != null){ ListNode pre = pHead; ListNode next = cur.next; while(pre.next != null &amp;&amp; pre.next.val &lt; cur.val){ pre = pre.next; } cur.next = pre.next; pre.next = cur; cur = next; } return pHead.next; }}","link":"/2020/03/25/LeetCode-147-insert-sort-list/"}],"tags":[{"name":"test","slug":"test","link":"/tags/test/"},{"name":"LeetCode","slug":"LeetCode","link":"/tags/LeetCode/"}],"categories":[{"name":"test","slug":"test","link":"/categories/test/"},{"name":"LeetCode","slug":"LeetCode","link":"/categories/LeetCode/"}]}